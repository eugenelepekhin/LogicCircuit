<#@ template language="C#" inherits="Transformation" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
	bool isSubclass = this.Table.IsSubclass();
	string createParam = "RowId rowId";
	string newParam = "this." + this.Store.Name + ", rowId";
	if(isSubclass) {
		foreach(Table parent in this.Table.Ancestors(false)) {
			createParam += ", RowId " + parent.Name + "RowId";
			newParam += ", " + parent.Name + "RowId";
		}
	}
#>
	// Wrapper for table <#=this.Table.Name#>.
	partial class <#=this.Table.Name#>Set : INotifyCollectionChanged, IEnumerable<<#=this.Table.Name#>> {

		public event NotifyCollectionChangedEventHandler? CollectionChanged;

		internal TableSnapshot<<#=this.Table.Name#>Data> Table { get; private set; }

<#if(this.RealmType != RealmType.Universe) {#>
		// Maps rowId to row wrapper
		private Dictionary<RowId, <#=this.Table.Name#>> itemByRowId = new Dictionary<RowId, <#=this.Table.Name#>>();

<#}#>
		// Gets StoreSnapshot this set belongs to.
		public <#=this.Store.Name#> <#=this.Store.Name#> { get { return (<#=this.Store.Name#>)this.Table.StoreSnapshot; } }

		// Constructor
		#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public <#=this.Table.Name#>Set(<#=this.Store.Name#> store) {
			ITableSnapshot? table = store.Table("<#=this.Table.Name#>");
			if(table != null) {
				Debug.Assert(store.IsFrozen, "The store should be frozen");
				this.Table = (TableSnapshot<<#=this.Table.Name#>Data>)table;
			} else {
				Debug.Assert(!store.IsFrozen, "In order to create table, the store should not be frozen");
				this.Table = <#=this.Table.Name#>Data.CreateTable(store);
			}
			this.Initialize<#=this.Table.Name#>Set();
		}
		#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

		partial void Initialize<#=this.Table.Name#>Set();

		//internal void Register() {
		//	foreach(RowId rowId in this.Table.Rows) {
		//		this.FindOrCreate(rowId);
		//	}
		//}

<#if(this.RealmType == RealmType.Multiverse) {#>
		// Registers wrapper
		internal void Register<#=this.Table.Name#>(<#=this.Table.Name#> item) {
			this.itemByRowId.Add(item.<#=this.Table.Name#>RowId, item);
<#	if(isSubclass) {#>
			this.<#=this.Store.Name#>.<#=this.Table.BaseName()#>Set.Register<#=this.Table.BaseName()#>(item);
<#	}#>
		}
<#}#>

		// gets items wrapper by RowId
		public <#=this.Table.Name#>? Find(RowId rowId) {
<#if(this.RealmType == RealmType.Universe) {#>
			if(!rowId.IsEmpty) {
				return this.Table.GetField(rowId, <#=this.Table.Name#>Data.<#=this.Table.Name#>Field.Field);
			}
<#} else if(this.RealmType == RealmType.Multiverse) {#>
			<#=this.Table.Name#> item;
			if(this.itemByRowId.TryGetValue(rowId, out item)) {
				return item;
			}
<#}#>
			return null;
		}

<#if(this.RealmType == RealmType.Multiverse) {#>
		private void Delete(RowId rowId) {
			if(this.itemByRowId.ContainsKey(rowId)) {
				this.itemByRowId.Remove(rowId);
			}
		}
<#}#>

		// gets items wrapper by RowId
		private IEnumerable<<#=this.Table.Name#>> Select(IEnumerable<RowId> rows) {
			foreach(RowId rowId in rows) {
				<#=this.Table.Name#>? item = this.Find(rowId);
				Debug.Assert(item != null, "What is the reason for the item not to be found?");
				yield return item;
			}
		}

		// Create wrapper for the row and register it in the dictionary
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1822:Mark members as static")]
		private <#=this.Table.Name#> Create(<#=createParam#>) {
<#if(this.Table.ItemModifier == ItemModifier.None) {#>
			<#=this.Table.Name#> item = new <#=this.Table.Name#>(<#=newParam#>);
<#	if(this.RealmType == RealmType.Multiverse) {#>
			this.Register<#=this.Table.Name#>(item);
<#	}#>
			return item;
<#} else {#>
			throw new InvalidOperationException();
<#}#>
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
		internal <#=this.Table.Name#> FindOrCreate(RowId rowId) {
			Debug.Assert(!rowId.IsEmpty && !this.Table.IsDeleted(rowId), "Bad RowId");
			<#=this.Table.Name#>? item;
<#if(this.RealmType == RealmType.Universe) {#>
			if((item = this.Find(rowId)) != null) {
<#} else if(this.RealmType == RealmType.Multiverse) {#>
			if(this.itemByRowId.TryGetValue(rowId, out item)) {
<#}#>
				Debug.Assert(!item.IsDeleted(), "Deleted item should not be present in the dictionary");
				return item;
			}
<#
if(isSubclass || this.Table.Subclasses().FirstOrDefault() != null) {
	Key primaryKey = this.Table.PrimaryKey();
	if(primaryKey.KeyType != KeyType.Auto) {
		Column pkColumn = primaryKey[0];
		this.WriteLine("\t\t\t" + pkColumn.Type + " primaryKeyValue = this.Table.GetField(rowId, " + this.Table.Name + "Data." + pkColumn.Name + "Field.Field);");
	} else {
		this.WriteLine("\t\t\tRowId primaryKeyValue = rowId;");
	}
}
#>
<#
if(this.Table.Subclasses().FirstOrDefault() != null) {
	foreach(Table subclass in this.Table.Subclasses()) {
		// Note! subclass cannot have auto primary key.
		string primaryKeyField = subclass.Name + "Data." + subclass.PrimaryKey()[0].Name + "Field.Field";
#>

			RowId rowId<#=subclass.Name#> = this.<#=this.Store.Name#>.<#=subclass.Name#>Set.Table.Find(<#=primaryKeyField#>, primaryKeyValue);
			if(!rowId<#=subclass.Name#>.IsEmpty) {
				return this.<#=this.Store.Name#>.<#=subclass.Name#>Set.FindOrCreate(rowId<#=subclass.Name#>);
			}
<#
	}
}
#>

<#if(!isSubclass) {#>
			return this.Create(rowId);
<#} else {
	Column mainPrimary = this.Table.PrimaryKey()[0];
	string selectList = "rowId";
#>

<#
	foreach(Table parent in this.Table.Ancestors(false)) {
		Key pk = parent.PrimaryKey();
		if(pk.KeyType == KeyType.Auto) {
			selectList += ", primaryKeyValue";
			continue;
		} else {
			selectList += ", table" + parent.Name + ".Find(" + parent.Name + "Data." + pk[0].Name + "Field.Field, primaryKeyValue)";
		}
#>
			TableSnapshot<<#=parent.Name#>Data>? table<#=parent.Name#> = (TableSnapshot<<#=parent.Name#>Data>?)this.<#=this.Store.Name#>.Table("<#=parent.Name#>");
			Debug.Assert(table<#=parent.Name#> != null);
<#	}#>
			return this.Create(<#=selectList#>);
<#}#>
		}

		// Creates <#=this.Table.Name#> wrapper
		private <#=this.Table.Name#> CreateItem(
			// Fields of <#=this.Table.Name#> table
<#
foreach(Column column in this.Table.Columns) {
	Key foreign = this.Table.ForeignKey(column);
	if(foreign != null && foreign.KeyType == KeyType.Subclass && this.Table.Ancestors(true).Last().PrimaryKey().KeyType == KeyType.Auto) {
		continue;
	}
	this.Write("\t\t\t");
	if(foreign == null || foreign.KeyType == KeyType.Subclass) {
		this.Write(column.Type + " " + column.Name);
	} else {
		this.Write(foreign.ParentName + " " + foreign.RoleName());
	}
	if(!column.IsLast()) {
		this.WriteLine(",");
	}
}
if(isSubclass) {
	this.WriteLine("");
	foreach(Table parent in this.Table.Ancestors(false)) {
		this.WriteLine("\t\t\t// Fields of " + parent.Name + " table");
		foreach(Column column in parent.Columns) {
			if(!parent.IsPrimary(column)) {
				this.Write("\t\t\t,");
				Key foreign = parent.ForeignKey(column);
				if(foreign == null) {
					this.Write(column.Type + " " + column.Name);
				} else {
					this.Write(foreign.ParentName + " " + foreign.RoleName());
				}
				//if(!column.IsLast()) {
				//	this.WriteLine(",");
				//}
			}
		}
	}
}
#>

		) {
<#
string subclassInsert = string.Empty;
if(isSubclass) {
	Column mainPrimary = this.Table.PrimaryKey()[0];
	foreach(Table parent in this.Table.Ancestors(false).Reverse()) {
		subclassInsert += ", rowId" + parent.Name;
#>
			TableSnapshot<<#=parent.Name#>Data>? table<#=parent.Name#> = (TableSnapshot<<#=parent.Name#>Data>?)this.<#=this.Store.Name#>.Table("<#=parent.Name#>");
			Debug.Assert(table<#=parent.Name#> != null);
			<#=parent.Name#>Data data<#=parent.Name#> = new <#=parent.Name#>Data() {
<#
		foreach(Column column in parent.Columns) {
			this.Write("\t\t\t\t");
			if(parent.IsPrimary(column)) {
				this.Write(column.Name + " = ");
				if(parent.Ancestors(true).Last().PrimaryKey().KeyType == KeyType.Auto) {
					this.Write("rowId" + parent.BaseName());
				} else {
					this.Write(mainPrimary.Name);
				}
			} else {
				Key foreign = parent.ForeignKey(column);
				if(foreign == null) {
					this.Write(column.Name + " = " + column.Name);
				} else {
					string fn = foreign.RoleName();
					Key primaryKey = foreign.Parent().PrimaryKey();
					string parentId = (primaryKey.KeyType == KeyType.Auto) ? primaryKey.Table.Name + "RowId" : primaryKey[0].Name;
					this.Write(column.Name + " = (" + fn + " != null) ? " + fn + "." + parentId + " : " + parent.Name + "Data." + column.Name + "Field.Field.DefaultValue");
				}
			}
			if(column != parent.Columns[parent.Columns.Count - 1]) {
				this.Write(",");
			}
			this.WriteLine(null);
		}
#>
			};
			RowId rowId<#=parent.Name#> = table<#=parent.Name#>.Insert(ref data<#=parent.Name#>);

<#
	}
}
#>
			<#=this.Table.Name#>Data data<#=this.Table.Name#> = new <#=this.Table.Name#>Data() {
<#
foreach(Column column in this.Table.Columns) {
	Key foreign = this.Table.ForeignKey(column);
	if(foreign == null || foreign.KeyType == KeyType.Subclass) {
		string value = column.Name;
		if(foreign != null && this.Table.Ancestors(true).Last().PrimaryKey().KeyType == KeyType.Auto) {
			value = "rowId" + foreign.ParentName;
		}
#>
				<#=column.Name#> = <#=value#>,
<#
	} else {
		Table parent = foreign.Parent();
		Key primaryKey = parent.PrimaryKey();
		string parentId = (primaryKey.KeyType == KeyType.Auto) ? parent.Name + "RowId" : primaryKey[0].Name;
#>
				<#=column.Name#> = (<#=foreign.RoleName()#> != null) ? <#=foreign.RoleName()#>.<#=parentId#> : <#=this.Table.Name#>Data.<#=column.Name#>Field.Field.DefaultValue,
<#
	}
}
#>
			};
			return this.Create(this.Table.Insert(ref data<#=this.Table.Name#>)<#=subclassInsert#>);
		}

		// Search helpers

<#
System.Collections.Generic.HashSet<string> searchFunctionName = new System.Collections.Generic.HashSet<string>();
foreach(Key key in this.Table.Keys) {
	string returnType = this.Table.Name;
	string function = "Find";
	if(!key.IsUnique()) {
		returnType = "IEnumerable<" + returnType + ">";
		function = "Select";
	} else {
		returnType += "?";
	}
	if(key.Count == 1) {
		Column column = key[0];
		if(key.IsUnique() || this.Table.UniqueKey(column) == null) {
			Key foreign = this.Table.ForeignKey(column);
			if(foreign != null && foreign.KeyType == KeyType.Subclass) {
				foreign = null;
			}
			string columnType = column.Type;
			string columnName = column.Name;
			string value = Transformation.Camelize(columnName);
			if(foreign != null) {
				columnType = foreign.ParentName;
				columnName = foreign.RoleName();
				Table parent = foreign.Parent();
				Key primaryKey = parent.PrimaryKey();
				value = Transformation.Camelize(columnName) + "." + ((primaryKey.KeyType == KeyType.Auto) ? parent.Name + "RowId" : primaryKey[0].Name);
			}
			string suffix = "";
			if(!key.IsPrimary() || isSubclass) {
				suffix = "By" + columnName;
			}
			if(searchFunctionName.Add(function + suffix)) {
#>
		// <#=function#>s <#=this.Table.Name#> by <#=columnName#>
		public <#=returnType#> <#=function#><#=suffix#>(<#=columnType#> <#=Transformation.Camelize(columnName)#>) {
			return this.<#=function#>(this.Table.<#=function#>(<#=this.Table.Name#>Data.<#=column.Name#>Field.Field, <#=value#>));
		}

<#
			}
		}
	} else if(key.KeyType != KeyType.Auto) {
		Column column0 = key[0];
		Column column1 = key[1];
		if(key.IsUnique() || this.Table.UniqueKey(column0, column1) == null) {
			Key foreign0 = this.Table.ForeignKey(column0);
			if(foreign0 != null && foreign0.KeyType == KeyType.Subclass) {
				foreign0 = null;
			}
			string column0Type = column0.Type;
			string column0Name = column0.Name;
			string value0 = Transformation.Camelize(column0Name);
			if(foreign0 != null) {
				column0Type = foreign0.ParentName;
				column0Name = foreign0.RoleName();
				Table parent = foreign0.Parent();
				Key primaryKey = parent.PrimaryKey();
				value0 = Transformation.Camelize(column0Name) + "." + ((primaryKey.KeyType == KeyType.Auto) ? parent.Name + "RowId" : primaryKey[0].Name);
			}
			Key foreign1 = this.Table.ForeignKey(column1);
			if(foreign1 != null && foreign1.KeyType == KeyType.Subclass) {
				foreign1 = null;
			}
			string column1Type = column1.Type;
			string column1Name = column1.Name;
			string value1 = Transformation.Camelize(column1Name);
			if(foreign1 != null) {
				column1Type = foreign1.ParentName;
				column1Name = foreign1.RoleName();
				Table parent = foreign1.Parent();
				Key primaryKey = parent.PrimaryKey();
				value1 = Transformation.Camelize(column1Name) + "." + ((primaryKey.KeyType == KeyType.Auto) ? parent.Name + "RowId" : primaryKey[0].Name);
			}
			string suffix = "";
			if(!key.IsPrimary()) {
				suffix = "By" + column0Name + "And" + column1Name;
			}
			if(searchFunctionName.Add(function + suffix)) {
#>
		// <#=function#>s <#=this.Table.Name#> by <#=column0Name#> and <#=column1Name#>
		public <#=returnType#> <#=function#><#=suffix#>(<#=column0Type#> <#=Transformation.Camelize(column0Name)#>, <#=column1Type#> <#=Transformation.Camelize(column1Name)#>) {
			return this.<#=function#>(
				this.Table.<#=function#>(
					<#=this.Table.Name#>Data.<#=column0.Name#>Field.Field, <#=this.Table.Name#>Data.<#=column1.Name#>Field.Field,
					<#=value0#>, <#=value1#>
				)
			);
		}

<#
			}
		}
	}
}
#>
		public IEnumerator<<#=this.Table.Name#>> GetEnumerator() {
<#if(this.RealmType != RealmType.Universe) {#>
			if(this.<#=this.Store.Name#>.IsEditor || this.<#=this.Store.Name#>.UpdateInProgress) {
				return new Enumerator(this, this.Table.GetEnumerator());
			} else {
				return this.itemByRowId.Values.GetEnumerator();
			}
<#} else {#>
			return this.Select(this.Table.Rows).GetEnumerator();
<#}#>
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.GetEnumerator();
		}

		private void NotifyCollectionChanged(NotifyCollectionChangedEventArgs arg) {
			NotifyCollectionChangedEventHandler? handler = this.CollectionChanged;
			if(handler != null) {
<#if(this.UseDispatcher) {#>
				System.Windows.Threading.Dispatcher dispatcher = this.<#=this.Store.Name#>.Dispatcher;
				if(dispatcher != null && dispatcher.Thread != System.Threading.Thread.CurrentThread) {
					dispatcher.Invoke(new Action<NotifyCollectionChangedEventArgs>(this.NotifyCollectionChanged), arg);
					return;
				}
<#}#>
				handler(this, arg);
			}
		}

		internal List<<#=this.Table.Name#>>? UpdateSet(int oldVersion, int newVersion) {
			IEnumerator<TableChange<<#=this.Table.Name#>Data>>? change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<<#=this.Table.Name#>>? del = (handlerAttached) ? new List<<#=this.Table.Name#>>() : null;
				while(change.MoveNext()) {
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						this.FindOrCreate(change.Current.RowId);
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						break;
					case SnapTableAction.Delete:
<#if(this.RealmType != RealmType.Universe) {#>
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist?");
						if(handlerAttached) {
							del.Add(this.Find(change.Current.RowId)!);
						}
						this.Delete(change.Current.RowId);
<#} else {#>
						if(handlerAttached) {
							<#=this.Table.Name#> item = change.Current.GetOldField(<#=this.Table.Name#>Data.<#=this.Table.Name#>Field.Field);
							Debug.Assert(item.IsDeleted());
							del!.Add(item);
						}
<#}#>
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						break;
					}
				}
				change.Dispose();
				return del;
			}
			return null;
		}

		internal void NotifyVersionChanged(int oldVersion, int newVersion, List<<#=this.Table.Name#>>? deleted) {
			IEnumerator<TableChange<<#=this.Table.Name#>Data>>? change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<<#=this.Table.Name#>>? add = (handlerAttached) ? new List<<#=this.Table.Name#>>() : null;
				this.StartNotify<#=this.Table.Name#>SetChanged(oldVersion, newVersion);
				while(change.MoveNext()) {
					this.Notify<#=this.Table.Name#>SetChanged(change.Current);
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						if(handlerAttached) {
							add!.Add(this.Find(change.Current.RowId)!);
						}
						break;
					case SnapTableAction.Delete:
<#if(this.RealmType != RealmType.Universe) {#>
						Debug.Assert(this.Find(change.Current.RowId) == null, "Why the item still exists?");
<#} else {#>
						Debug.Assert(change.Current.GetOldField(<#=this.Table.Name#>Data.<#=this.Table.Name#>Field.Field).IsDeleted(), "Why the item still exists?");
<#}#>
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						this.Find(change.Current.RowId)!.NotifyChanged(change.Current);
						break;
					}
				}
				change.Dispose();
				if(handlerAttached) {
					if(deleted != null && 0 < deleted.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, deleted));
					}
					if(0 < add!.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, add));
					}
				}
				this.EndNotify<#=this.Table.Name#>SetChanged();
			}
		}

		partial void StartNotify<#=this.Table.Name#>SetChanged(int oldVersion, int newVersion);
		partial void EndNotify<#=this.Table.Name#>SetChanged();
		partial void Notify<#=this.Table.Name#>SetChanged(TableChange<<#=this.Table.Name#>Data> change);

		internal void NotifyRolledBack(int version) {
			if(this.Table.WasAffected(version)) {
				IEnumerator<RowId> change = this.Table.GetRolledBackChanges(version);
				if(change != null) {
					while(change.MoveNext()) {
						RowId rowId = change.Current;
						if(this.Table.IsDeleted(rowId)) {
<#if(this.RealmType == RealmType.Multiverse) {#>
							this.Delete(rowId);
<#}#>
						} else {
							this.FindOrCreate(rowId);
						}
					}
					change.Dispose();
				}
			}
		}
<#if(this.RealmType != RealmType.Universe) {#>

		private class Enumerator : IEnumerator<<#=this.Table.Name#>> {
			private <#=this.Table.Name#>Set set;
			private IEnumerator<RowId> enumerator;
			public Enumerator(<#=this.Table.Name#>Set set, IEnumerator<RowId> enumerator) {
				this.set = set;
				this.enumerator = enumerator;
			}

			public bool MoveNext() {
				return this.enumerator.MoveNext();
			}

			public <#=this.Table.Name#> Current { get { return this.set.Find(this.enumerator.Current); } }
			object System.Collections.IEnumerator.Current { get { return this.Current; } }

			public void Dispose() {
			}

			public void Reset() {
				throw new NotSupportedException();
			}
		}
<#}#>
	}
