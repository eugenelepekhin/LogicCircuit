// This file is generated by ItemWrapper.Generator. Do not modify this file as it will be regenerated
namespace LogicCircuit {
	using System;
	using System.Collections.Generic;
	using System.Collections.Specialized;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Globalization;
	using System.Linq;
	using System.Text;
	using LogicCircuit.DataPersistent;

	// Defines the shape of the table GraphicsArray
	internal partial struct GraphicsArrayData {
		public Guid GraphicsArrayId;
		public bool WriteOn1;
		private MemoryOnStart fieldOnStart;
		public MemoryOnStart OnStart {
			get { return this.fieldOnStart; }
			set { this.fieldOnStart = GraphicsArray.CheckOnStart(value); }
		}
		private int fieldDataBitWidth;
		public int DataBitWidth {
			get { return this.fieldDataBitWidth; }
			set { this.fieldDataBitWidth = GraphicsArray.CheckBitWidth(value); }
		}
		private int fieldBitsPerPixel;
		public int BitsPerPixel {
			get { return this.fieldBitsPerPixel; }
			set { this.fieldBitsPerPixel = GraphicsArray.CheckBitsPerPixel(value); }
		}
		private int fieldWidth;
		public int Width {
			get { return this.fieldWidth; }
			set { this.fieldWidth = GraphicsArray.CheckWidth(value); }
		}
		private int fieldHeight;
		public int Height {
			get { return this.fieldHeight; }
			set { this.fieldHeight = GraphicsArray.CheckHeight(value); }
		}
		private int fieldZoom;
		public int Zoom {
			get { return this.fieldZoom; }
			set { this.fieldZoom = GraphicsArray.CheckZoom(value); }
		}
		public string Note;
		internal GraphicsArray? GraphicsArray;
		// Field accessors
		// Accessor of the GraphicsArrayId field
		public sealed class GraphicsArrayIdField : IField<GraphicsArrayData, Guid>, IFieldSerializer<GraphicsArrayData> {
			public static readonly GraphicsArrayIdField Field = new GraphicsArrayIdField();
			private GraphicsArrayIdField() {}
			public string Name { get { return "GraphicsArrayId"; } }
			public int Order { get; set; }
			public Guid DefaultValue { get { return default; } }
			public Guid GetValue(ref GraphicsArrayData record) {
				return record.GraphicsArrayId;
			}
			public void SetValue(ref GraphicsArrayData record, Guid value) {
				record.GraphicsArrayId = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return l.GraphicsArrayId.CompareTo(r.GraphicsArrayId);
			}
			public int Compare(Guid l, Guid r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.GraphicsArrayId, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.GraphicsArrayId);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.GraphicsArrayId = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.GraphicsArrayId = new Guid(text);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the WriteOn1 field
		public sealed class WriteOn1Field : IField<GraphicsArrayData, bool>, IFieldSerializer<GraphicsArrayData> {
			public static readonly WriteOn1Field Field = new WriteOn1Field();
			private WriteOn1Field() {}
			public string Name { get { return "WriteOn1"; } }
			public int Order { get; set; }
			public bool DefaultValue { get { return false; } }
			public bool GetValue(ref GraphicsArrayData record) {
				return record.WriteOn1;
			}
			public void SetValue(ref GraphicsArrayData record, bool value) {
				record.WriteOn1 = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return l.WriteOn1.CompareTo(r.WriteOn1);
			}
			public int Compare(bool l, bool r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.WriteOn1, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.WriteOn1);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.WriteOn1 = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.WriteOn1 = bool.Parse(text);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the OnStart field
		public sealed class OnStartField : IField<GraphicsArrayData, MemoryOnStart>, IFieldSerializer<GraphicsArrayData> {
			public static readonly OnStartField Field = new OnStartField();
			private OnStartField() {}
			public string Name { get { return "OnStart"; } }
			public int Order { get; set; }
			public MemoryOnStart DefaultValue { get { return MemoryOnStart.Zeros; } }
			public MemoryOnStart GetValue(ref GraphicsArrayData record) {
				return record.OnStart;
			}
			public void SetValue(ref GraphicsArrayData record, MemoryOnStart value) {
				record.OnStart = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return l.OnStart.CompareTo(r.OnStart);
			}
			public int Compare(MemoryOnStart l, MemoryOnStart r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.OnStart, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.OnStart);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.OnStart = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.OnStart = EnumHelper.Parse<MemoryOnStart>(text, this.DefaultValue);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the DataBitWidth field
		public sealed class DataBitWidthField : IField<GraphicsArrayData, int>, IFieldSerializer<GraphicsArrayData> {
			public static readonly DataBitWidthField Field = new DataBitWidthField();
			private DataBitWidthField() {}
			public string Name { get { return "DataBitWidth"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return 8; } }
			public int GetValue(ref GraphicsArrayData record) {
				return record.DataBitWidth;
			}
			public void SetValue(ref GraphicsArrayData record, int value) {
				record.DataBitWidth = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return Math.Sign((long)l.DataBitWidth - (long)r.DataBitWidth);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.DataBitWidth, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.DataBitWidth);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.DataBitWidth = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.DataBitWidth = int.Parse(text, CultureInfo.InvariantCulture);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the BitsPerPixel field
		public sealed class BitsPerPixelField : IField<GraphicsArrayData, int>, IFieldSerializer<GraphicsArrayData> {
			public static readonly BitsPerPixelField Field = new BitsPerPixelField();
			private BitsPerPixelField() {}
			public string Name { get { return "BitsPerPixel"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return 1; } }
			public int GetValue(ref GraphicsArrayData record) {
				return record.BitsPerPixel;
			}
			public void SetValue(ref GraphicsArrayData record, int value) {
				record.BitsPerPixel = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return Math.Sign((long)l.BitsPerPixel - (long)r.BitsPerPixel);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.BitsPerPixel, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.BitsPerPixel);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.BitsPerPixel = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.BitsPerPixel = int.Parse(text, CultureInfo.InvariantCulture);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the Width field
		public sealed class WidthField : IField<GraphicsArrayData, int>, IFieldSerializer<GraphicsArrayData> {
			public static readonly WidthField Field = new WidthField();
			private WidthField() {}
			public string Name { get { return "Width"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return 160; } }
			public int GetValue(ref GraphicsArrayData record) {
				return record.Width;
			}
			public void SetValue(ref GraphicsArrayData record, int value) {
				record.Width = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return Math.Sign((long)l.Width - (long)r.Width);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.Width, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Width);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.Width = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.Width = int.Parse(text, CultureInfo.InvariantCulture);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the Height field
		public sealed class HeightField : IField<GraphicsArrayData, int>, IFieldSerializer<GraphicsArrayData> {
			public static readonly HeightField Field = new HeightField();
			private HeightField() {}
			public string Name { get { return "Height"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return 120; } }
			public int GetValue(ref GraphicsArrayData record) {
				return record.Height;
			}
			public void SetValue(ref GraphicsArrayData record, int value) {
				record.Height = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return Math.Sign((long)l.Height - (long)r.Height);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.Height, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Height);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.Height = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.Height = int.Parse(text, CultureInfo.InvariantCulture);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the Zoom field
		public sealed class ZoomField : IField<GraphicsArrayData, int>, IFieldSerializer<GraphicsArrayData> {
			public static readonly ZoomField Field = new ZoomField();
			private ZoomField() {}
			public string Name { get { return "Zoom"; } }
			public int Order { get; set; }
			public int DefaultValue { get { return 1; } }
			public int GetValue(ref GraphicsArrayData record) {
				return record.Zoom;
			}
			public void SetValue(ref GraphicsArrayData record, int value) {
				record.Zoom = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return Math.Sign((long)l.Zoom - (long)r.Zoom);
			}
			public int Compare(int l, int r) {
				return Math.Sign((long)l - (long)r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.Zoom, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Zoom);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.Zoom = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.Zoom = int.Parse(text, CultureInfo.InvariantCulture);
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Accessor of the Note field
		public sealed class NoteField : IField<GraphicsArrayData, string>, IFieldSerializer<GraphicsArrayData> {
			public static readonly NoteField Field = new NoteField();
			private NoteField() {}
			public string Name { get { return "Note"; } }
			public int Order { get; set; }
			public string DefaultValue { get { return ""; } }
			public string GetValue(ref GraphicsArrayData record) {
				return record.Note;
			}
			public void SetValue(ref GraphicsArrayData record, string value) {
				record.Note = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return StringComparer.Ordinal.Compare(l.Note, r.Note);
			}
			public int Compare(string? l, string? r) {
				return StringComparer.Ordinal.Compare(l, r);
			}

			// Implementation of interface IFieldSerializer<GraphicsArrayData>
			bool IFieldSerializer<GraphicsArrayData>.NeedToSave(ref GraphicsArrayData data) {
				return this.Compare(data.Note, this.DefaultValue) != 0;
			}
			string IFieldSerializer<GraphicsArrayData>.GetTextValue(ref GraphicsArrayData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Note);
			}
			void IFieldSerializer<GraphicsArrayData>.SetDefault(ref GraphicsArrayData data) {
				data.Note = this.DefaultValue;
			}
			void IFieldSerializer<GraphicsArrayData>.SetTextValue(ref GraphicsArrayData data, string text) {
				data.Note = text;
			}
			bool IFieldSerializer<GraphicsArrayData>.WasWritten { get; set; }

		}

		// Special field used to access items wrapper of this record from record.
		// This is used when no other universes is used
		internal sealed class GraphicsArrayField : IField<GraphicsArrayData, GraphicsArray> {
			public static readonly GraphicsArrayField Field = new GraphicsArrayField();
			private GraphicsArrayField() {}
			public string Name { get { return "GraphicsArrayWrapper"; } }
			public int Order { get; set; }
			public GraphicsArray DefaultValue { get { return null!; } }
			public GraphicsArray GetValue(ref GraphicsArrayData record) {
				return record.GraphicsArray!;
			}
			public void SetValue(ref GraphicsArrayData record, GraphicsArray value) {
				record.GraphicsArray = value;
			}
			public int Compare(ref GraphicsArrayData l, ref GraphicsArrayData r) {
				return this.Compare(l.GraphicsArray, r.GraphicsArray);
			}
			public int Compare(GraphicsArray? l, GraphicsArray? r) {
				if(object.ReferenceEquals(l, r)) return 0;
				if(l == null) return -1;
				if(r == null) return 1;
				return l.GraphicsArrayRowId.CompareTo(r.GraphicsArrayRowId);
			}
		}

		private static readonly IField<GraphicsArrayData>[] fields = {
			GraphicsArrayIdField.Field,
			WriteOn1Field.Field,
			OnStartField.Field,
			DataBitWidthField.Field,
			BitsPerPixelField.Field,
			WidthField.Field,
			HeightField.Field,
			ZoomField.Field,
			NoteField.Field,
			GraphicsArrayField.Field
		};

		// Creates table.
		public static TableSnapshot<GraphicsArrayData> CreateTable(StoreSnapshot store) {
			TableSnapshot<GraphicsArrayData> table = new TableSnapshot<GraphicsArrayData>(store, "GraphicsArray", GraphicsArrayData.fields);
			// Create all but foreign keys of the table
			table.MakeUnique("PK_GraphicsArray", GraphicsArrayData.GraphicsArrayIdField.Field , true);
			// Return created table
			return table;
		}

		// Creates all foreign keys of the table
		public static void CreateForeignKeys(StoreSnapshot store) {
			TableSnapshot<GraphicsArrayData>? table = (TableSnapshot<GraphicsArrayData>?)store.Table("GraphicsArray");
			Debug.Assert(table != null);
			table.CreateForeignKey("PK_GraphicsArray", store.Table("Circuit"), GraphicsArrayData.GraphicsArrayIdField.Field, ForeignKeyAction.Cascade, false);
		}
	}

	// Class wrapper for a record.
	partial class GraphicsArray : Circuit {

		// RowId of the wrapped record
		internal RowId GraphicsArrayRowId { get; private set; }

		// Constructor
		#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public GraphicsArray(CircuitProject store, RowId rowIdGraphicsArray, RowId rowIdCircuit) : base(store, rowIdCircuit) {
			Debug.Assert(!rowIdGraphicsArray.IsEmpty);
			this.GraphicsArrayRowId = rowIdGraphicsArray;
			// Link back to record. Assuming that a transaction is started
			this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.GraphicsArrayField.Field, this);
			this.InitializeGraphicsArray();
		}
		#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

		partial void InitializeGraphicsArray();

		// Gets table storing this item.
		private TableSnapshot<GraphicsArrayData> Table { get { return this.CircuitProject.GraphicsArraySet.Table; } }


		//Properties of GraphicsArray

		// Gets value of the GraphicsArrayId field.
		public Guid GraphicsArrayId {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.GraphicsArrayIdField.Field); }
		}

		// Gets or sets value of the WriteOn1 field.
		public bool WriteOn1 {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.WriteOn1Field.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.WriteOn1Field.Field, value); }
		}

		// Gets or sets value of the OnStart field.
		public MemoryOnStart OnStart {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.OnStartField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.OnStartField.Field, value); }
		}

		// Gets or sets value of the DataBitWidth field.
		public int DataBitWidth {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.DataBitWidthField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.DataBitWidthField.Field, value); }
		}

		// Gets or sets value of the BitsPerPixel field.
		public int BitsPerPixel {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.BitsPerPixelField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.BitsPerPixelField.Field, value); }
		}

		// Gets or sets value of the Width field.
		public int Width {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.WidthField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.WidthField.Field, value); }
		}

		// Gets or sets value of the Height field.
		public int Height {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.HeightField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.HeightField.Field, value); }
		}

		// Gets or sets value of the Zoom field.
		public int Zoom {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.ZoomField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.ZoomField.Field, value); }
		}

		// Gets or sets value of the Note field.
		public override string Note {
			get { return this.Table.GetField(this.GraphicsArrayRowId, GraphicsArrayData.NoteField.Field); }
			set { this.Table.SetField(this.GraphicsArrayRowId, GraphicsArrayData.NoteField.Field, value); }
		}


		internal void NotifyChanged(TableChange<GraphicsArrayData> change) {
			if(this.HasListener) {
				GraphicsArrayData oldData, newData;
				change.GetOldData(out oldData);
				change.GetNewData(out newData);
				if(GraphicsArrayData.GraphicsArrayIdField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("GraphicsArrayId");
				}
				if(GraphicsArrayData.WriteOn1Field.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("WriteOn1");
				}
				if(GraphicsArrayData.OnStartField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("OnStart");
				}
				if(GraphicsArrayData.DataBitWidthField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("DataBitWidth");
				}
				if(GraphicsArrayData.BitsPerPixelField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("BitsPerPixel");
				}
				if(GraphicsArrayData.WidthField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Width");
				}
				if(GraphicsArrayData.HeightField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Height");
				}
				if(GraphicsArrayData.ZoomField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Zoom");
				}
				if(GraphicsArrayData.NoteField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Note");
				}
			}
			this.OnGraphicsArrayChanged();
		}

		partial void OnGraphicsArrayChanged();
	}


	// Wrapper for table GraphicsArray.
	partial class GraphicsArraySet : INotifyCollectionChanged, IEnumerable<GraphicsArray> {

		public event NotifyCollectionChangedEventHandler? CollectionChanged;

		internal TableSnapshot<GraphicsArrayData> Table { get; private set; }

		// Gets StoreSnapshot this set belongs to.
		public CircuitProject CircuitProject { get { return (CircuitProject)this.Table.StoreSnapshot; } }

		// Constructor
		#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public GraphicsArraySet(CircuitProject store) {
			ITableSnapshot? table = store.Table("GraphicsArray");
			if(table != null) {
				Debug.Assert(store.IsFrozen, "The store should be frozen");
				this.Table = (TableSnapshot<GraphicsArrayData>)table;
			} else {
				Debug.Assert(!store.IsFrozen, "In order to create table, the store should not be frozen");
				this.Table = GraphicsArrayData.CreateTable(store);
			}
			this.InitializeGraphicsArraySet();
		}
		#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

		partial void InitializeGraphicsArraySet();

		//internal void Register() {
		//	foreach(RowId rowId in this.Table.Rows) {
		//		this.FindOrCreate(rowId);
		//	}
		//}


		// gets items wrapper by RowId
		public GraphicsArray? Find(RowId rowId) {
			if(!rowId.IsEmpty) {
				return this.Table.GetField(rowId, GraphicsArrayData.GraphicsArrayField.Field);
			}
			return null;
		}


		// gets items wrapper by RowId
		private IEnumerable<GraphicsArray> Select(IEnumerable<RowId> rows) {
			foreach(RowId rowId in rows) {
				GraphicsArray? item = this.Find(rowId);
				Debug.Assert(item != null, "What is the reason for the item not to be found?");
				yield return item;
			}
		}

		// Create wrapper for the row and register it in the dictionary
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1822:Mark members as static")]
		private GraphicsArray Create(RowId rowId, RowId CircuitRowId) {
			GraphicsArray item = new GraphicsArray(this.CircuitProject, rowId, CircuitRowId);
			return item;
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
		internal GraphicsArray FindOrCreate(RowId rowId) {
			Debug.Assert(!rowId.IsEmpty && !this.Table.IsDeleted(rowId), "Bad RowId");
			GraphicsArray? item;
			if((item = this.Find(rowId)) != null) {
				Debug.Assert(!item.IsDeleted(), "Deleted item should not be present in the dictionary");
				return item;
			}
			Guid primaryKeyValue = this.Table.GetField(rowId, GraphicsArrayData.GraphicsArrayIdField.Field);


			TableSnapshot<CircuitData>? tableCircuit = (TableSnapshot<CircuitData>?)this.CircuitProject.Table("Circuit");
			Debug.Assert(tableCircuit != null);
			return this.Create(rowId, tableCircuit.Find(CircuitData.CircuitIdField.Field, primaryKeyValue));
		}

		// Creates GraphicsArray wrapper
		private GraphicsArray CreateItem(
			// Fields of GraphicsArray table
			Guid GraphicsArrayId,
			bool WriteOn1,
			MemoryOnStart OnStart,
			int DataBitWidth,
			int BitsPerPixel,
			int Width,
			int Height,
			int Zoom,
			string Note
			// Fields of Circuit table

		) {
			TableSnapshot<CircuitData>? tableCircuit = (TableSnapshot<CircuitData>?)this.CircuitProject.Table("Circuit");
			Debug.Assert(tableCircuit != null);
			CircuitData dataCircuit = new CircuitData() {
				CircuitId = GraphicsArrayId
			};
			RowId rowIdCircuit = tableCircuit.Insert(ref dataCircuit);

			GraphicsArrayData dataGraphicsArray = new GraphicsArrayData() {
				GraphicsArrayId = GraphicsArrayId,
				WriteOn1 = WriteOn1,
				OnStart = OnStart,
				DataBitWidth = DataBitWidth,
				BitsPerPixel = BitsPerPixel,
				Width = Width,
				Height = Height,
				Zoom = Zoom,
				Note = Note,
			};
			return this.Create(this.Table.Insert(ref dataGraphicsArray), rowIdCircuit);
		}

		// Search helpers

		// Finds GraphicsArray by GraphicsArrayId
		public GraphicsArray? FindByGraphicsArrayId(Guid graphicsArrayId) {
			return this.Find(this.Table.Find(GraphicsArrayData.GraphicsArrayIdField.Field, graphicsArrayId));
		}

		public IEnumerator<GraphicsArray> GetEnumerator() {
			return this.Select(this.Table.Rows).GetEnumerator();
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.GetEnumerator();
		}

		private void NotifyCollectionChanged(NotifyCollectionChangedEventArgs arg) {
			NotifyCollectionChangedEventHandler? handler = this.CollectionChanged;
			if(handler != null) {
				handler(this, arg);
			}
		}

		internal List<GraphicsArray>? UpdateSet(int oldVersion, int newVersion) {
			IEnumerator<TableChange<GraphicsArrayData>>? change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<GraphicsArray>? del = (handlerAttached) ? new List<GraphicsArray>() : null;
				while(change.MoveNext()) {
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						this.FindOrCreate(change.Current.RowId);
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						break;
					case SnapTableAction.Delete:
						if(handlerAttached) {
							GraphicsArray item = change.Current.GetOldField(GraphicsArrayData.GraphicsArrayField.Field);
							Debug.Assert(item.IsDeleted());
							del!.Add(item);
						}
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						break;
					}
				}
				change.Dispose();
				return del;
			}
			return null;
		}

		internal void NotifyVersionChanged(int oldVersion, int newVersion, List<GraphicsArray>? deleted) {
			IEnumerator<TableChange<GraphicsArrayData>>? change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<GraphicsArray>? add = (handlerAttached) ? new List<GraphicsArray>() : null;
				this.StartNotifyGraphicsArraySetChanged(oldVersion, newVersion);
				while(change.MoveNext()) {
					this.NotifyGraphicsArraySetChanged(change.Current);
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						if(handlerAttached) {
							add!.Add(this.Find(change.Current.RowId)!);
						}
						break;
					case SnapTableAction.Delete:
						Debug.Assert(change.Current.GetOldField(GraphicsArrayData.GraphicsArrayField.Field).IsDeleted(), "Why the item still exists?");
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						this.Find(change.Current.RowId)!.NotifyChanged(change.Current);
						break;
					}
				}
				change.Dispose();
				if(handlerAttached) {
					if(deleted != null && 0 < deleted.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, deleted));
					}
					if(0 < add!.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, add));
					}
				}
				this.EndNotifyGraphicsArraySetChanged();
			}
		}

		partial void StartNotifyGraphicsArraySetChanged(int oldVersion, int newVersion);
		partial void EndNotifyGraphicsArraySetChanged();
		partial void NotifyGraphicsArraySetChanged(TableChange<GraphicsArrayData> change);

		internal void NotifyRolledBack(int version) {
			if(this.Table.WasAffected(version)) {
				IEnumerator<RowId> change = this.Table.GetRolledBackChanges(version);
				if(change != null) {
					while(change.MoveNext()) {
						RowId rowId = change.Current;
						if(this.Table.IsDeleted(rowId)) {
						} else {
							this.FindOrCreate(rowId);
						}
					}
					change.Dispose();
				}
			}
		}
	}

}
