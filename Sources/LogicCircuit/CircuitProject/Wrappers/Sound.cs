// This file is generated by ItemWrapper.Generator. Do not modify this file as it will be regenerated
namespace LogicCircuit {
	using System;
	using System.Collections.Generic;
	using System.Collections.Specialized;
	using System.ComponentModel;
	using System.Diagnostics;
	using System.Globalization;
	using System.Linq;
	using System.Text;
	using LogicCircuit.DataPersistent;

	// Defines the shape of the table Sound
	internal partial struct SoundData {
		public Guid SoundId;
		public PinSide PinSide;
		public string Notation;
		public string Note;
		internal Sound? Sound;
		// Field accessors
		// Accessor of the SoundId field
		public sealed class SoundIdField : IField<SoundData, Guid>, IFieldSerializer<SoundData> {
			public static readonly SoundIdField Field = new SoundIdField();
			private SoundIdField() {}
			public string Name { get { return "SoundId"; } }
			public int Order { get; set; }
			public Guid DefaultValue { get { return default; } }
			public Guid GetValue(ref SoundData record) {
				return record.SoundId;
			}
			public void SetValue(ref SoundData record, Guid value) {
				record.SoundId = value;
			}
			public int Compare(ref SoundData l, ref SoundData r) {
				return l.SoundId.CompareTo(r.SoundId);
			}
			public int Compare(Guid l, Guid r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer<SoundData>
			bool IFieldSerializer<SoundData>.NeedToSave(ref SoundData data) {
				return this.Compare(data.SoundId, this.DefaultValue) != 0;
			}
			string IFieldSerializer<SoundData>.GetTextValue(ref SoundData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.SoundId);
			}
			void IFieldSerializer<SoundData>.SetDefault(ref SoundData data) {
				data.SoundId = this.DefaultValue;
			}
			void IFieldSerializer<SoundData>.SetTextValue(ref SoundData data, string text) {
				data.SoundId = new Guid(text);
			}
			bool IFieldSerializer<SoundData>.WasWritten { get; set; }

		}

		// Accessor of the PinSide field
		public sealed class PinSideField : IField<SoundData, PinSide>, IFieldSerializer<SoundData> {
			public static readonly PinSideField Field = new PinSideField();
			private PinSideField() {}
			public string Name { get { return "PinSide"; } }
			public int Order { get; set; }
			public PinSide DefaultValue { get { return PinSide.Left; } }
			public PinSide GetValue(ref SoundData record) {
				return record.PinSide;
			}
			public void SetValue(ref SoundData record, PinSide value) {
				record.PinSide = value;
			}
			public int Compare(ref SoundData l, ref SoundData r) {
				return l.PinSide.CompareTo(r.PinSide);
			}
			public int Compare(PinSide l, PinSide r) {
				return l.CompareTo(r);
			}

			// Implementation of interface IFieldSerializer<SoundData>
			bool IFieldSerializer<SoundData>.NeedToSave(ref SoundData data) {
				return this.Compare(data.PinSide, this.DefaultValue) != 0;
			}
			string IFieldSerializer<SoundData>.GetTextValue(ref SoundData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.PinSide);
			}
			void IFieldSerializer<SoundData>.SetDefault(ref SoundData data) {
				data.PinSide = this.DefaultValue;
			}
			void IFieldSerializer<SoundData>.SetTextValue(ref SoundData data, string text) {
				data.PinSide = EnumHelper.Parse<PinSide>(text, this.DefaultValue);
			}
			bool IFieldSerializer<SoundData>.WasWritten { get; set; }

		}

		// Accessor of the Notation field
		public sealed class NotationField : IField<SoundData, string>, IFieldSerializer<SoundData> {
			public static readonly NotationField Field = new NotationField();
			private NotationField() {}
			public string Name { get { return "Notation"; } }
			public int Order { get; set; }
			public string DefaultValue { get { return ""; } }
			public string GetValue(ref SoundData record) {
				return record.Notation;
			}
			public void SetValue(ref SoundData record, string value) {
				record.Notation = value;
			}
			public int Compare(ref SoundData l, ref SoundData r) {
				return StringComparer.Ordinal.Compare(l.Notation, r.Notation);
			}
			public int Compare(string? l, string? r) {
				return StringComparer.Ordinal.Compare(l, r);
			}

			// Implementation of interface IFieldSerializer<SoundData>
			bool IFieldSerializer<SoundData>.NeedToSave(ref SoundData data) {
				return this.Compare(data.Notation, this.DefaultValue) != 0;
			}
			string IFieldSerializer<SoundData>.GetTextValue(ref SoundData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Notation);
			}
			void IFieldSerializer<SoundData>.SetDefault(ref SoundData data) {
				data.Notation = this.DefaultValue;
			}
			void IFieldSerializer<SoundData>.SetTextValue(ref SoundData data, string text) {
				data.Notation = text;
			}
			bool IFieldSerializer<SoundData>.WasWritten { get; set; }

		}

		// Accessor of the Note field
		public sealed class NoteField : IField<SoundData, string>, IFieldSerializer<SoundData> {
			public static readonly NoteField Field = new NoteField();
			private NoteField() {}
			public string Name { get { return "Note"; } }
			public int Order { get; set; }
			public string DefaultValue { get { return ""; } }
			public string GetValue(ref SoundData record) {
				return record.Note;
			}
			public void SetValue(ref SoundData record, string value) {
				record.Note = value;
			}
			public int Compare(ref SoundData l, ref SoundData r) {
				return StringComparer.Ordinal.Compare(l.Note, r.Note);
			}
			public int Compare(string? l, string? r) {
				return StringComparer.Ordinal.Compare(l, r);
			}

			// Implementation of interface IFieldSerializer<SoundData>
			bool IFieldSerializer<SoundData>.NeedToSave(ref SoundData data) {
				return this.Compare(data.Note, this.DefaultValue) != 0;
			}
			string IFieldSerializer<SoundData>.GetTextValue(ref SoundData data) {
				return string.Format(CultureInfo.InvariantCulture, "{0}", data.Note);
			}
			void IFieldSerializer<SoundData>.SetDefault(ref SoundData data) {
				data.Note = this.DefaultValue;
			}
			void IFieldSerializer<SoundData>.SetTextValue(ref SoundData data, string text) {
				data.Note = text;
			}
			bool IFieldSerializer<SoundData>.WasWritten { get; set; }

		}

		// Special field used to access items wrapper of this record from record.
		// This is used when no other universes is used
		internal sealed class SoundField : IField<SoundData, Sound> {
			public static readonly SoundField Field = new SoundField();
			private SoundField() {}
			public string Name { get { return "SoundWrapper"; } }
			public int Order { get; set; }
			public Sound DefaultValue { get { return null!; } }
			public Sound GetValue(ref SoundData record) {
				return record.Sound!;
			}
			public void SetValue(ref SoundData record, Sound value) {
				record.Sound = value;
			}
			public int Compare(ref SoundData l, ref SoundData r) {
				return this.Compare(l.Sound, r.Sound);
			}
			public int Compare(Sound? l, Sound? r) {
				if(object.ReferenceEquals(l, r)) return 0;
				if(l == null) return -1;
				if(r == null) return 1;
				return l.SoundRowId.CompareTo(r.SoundRowId);
			}
		}

		private static readonly IField<SoundData>[] fields = {
			SoundIdField.Field,
			PinSideField.Field,
			NotationField.Field,
			NoteField.Field,
			SoundField.Field
		};

		// Creates table.
		public static TableSnapshot<SoundData> CreateTable(StoreSnapshot store) {
			TableSnapshot<SoundData> table = new TableSnapshot<SoundData>(store, "Sound", SoundData.fields);
			// Create all but foreign keys of the table
			table.MakeUnique("PK_Sound", SoundData.SoundIdField.Field , true);
			// Return created table
			return table;
		}

		// Creates all foreign keys of the table
		public static void CreateForeignKeys(StoreSnapshot store) {
			TableSnapshot<SoundData>? table = (TableSnapshot<SoundData>?)store.Table("Sound");
			Debug.Assert(table != null);
			table.CreateForeignKey("PK_Sound", store.Table("Circuit"), SoundData.SoundIdField.Field, ForeignKeyAction.Cascade, false);
		}
	}

	// Class wrapper for a record.
	partial class Sound : Circuit {

		// RowId of the wrapped record
		internal RowId SoundRowId { get; private set; }

		// Constructor
		#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public Sound(CircuitProject store, RowId rowIdSound, RowId rowIdCircuit) : base(store, rowIdCircuit) {
			Debug.Assert(!rowIdSound.IsEmpty);
			this.SoundRowId = rowIdSound;
			// Link back to record. Assuming that a transaction is started
			this.Table.SetField(this.SoundRowId, SoundData.SoundField.Field, this);
			this.InitializeSound();
		}
		#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

		partial void InitializeSound();

		// Gets table storing this item.
		private TableSnapshot<SoundData> Table { get { return this.CircuitProject.SoundSet.Table; } }


		//Properties of Sound

		// Gets value of the SoundId field.
		public Guid SoundId {
			get { return this.Table.GetField(this.SoundRowId, SoundData.SoundIdField.Field); }
		}

		// Gets or sets value of the PinSide field.
		public PinSide PinSide {
			get { return this.Table.GetField(this.SoundRowId, SoundData.PinSideField.Field); }
			set { this.Table.SetField(this.SoundRowId, SoundData.PinSideField.Field, value); }
		}

		// Gets or sets value of the Notation field.
		public override string Notation {
			get { return this.Table.GetField(this.SoundRowId, SoundData.NotationField.Field); }
			set { this.Table.SetField(this.SoundRowId, SoundData.NotationField.Field, value); }
		}

		// Gets or sets value of the Note field.
		public override string Note {
			get { return this.Table.GetField(this.SoundRowId, SoundData.NoteField.Field); }
			set { this.Table.SetField(this.SoundRowId, SoundData.NoteField.Field, value); }
		}


		internal void NotifyChanged(TableChange<SoundData> change) {
			if(this.HasListener) {
				SoundData oldData, newData;
				change.GetOldData(out oldData);
				change.GetNewData(out newData);
				if(SoundData.SoundIdField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("SoundId");
				}
				if(SoundData.PinSideField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("PinSide");
				}
				if(SoundData.NotationField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Notation");
				}
				if(SoundData.NoteField.Field.Compare(ref oldData, ref newData) != 0) {
					this.NotifyPropertyChanged("Note");
				}
			}
			this.OnSoundChanged();
		}

		partial void OnSoundChanged();
	}


	// Wrapper for table Sound.
	partial class SoundSet : INotifyCollectionChanged, IEnumerable<Sound> {

		public event NotifyCollectionChangedEventHandler? CollectionChanged;

		internal TableSnapshot<SoundData> Table { get; private set; }

		// Gets StoreSnapshot this set belongs to.
		public CircuitProject CircuitProject { get { return (CircuitProject)this.Table.StoreSnapshot; } }

		// Constructor
		#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public SoundSet(CircuitProject store) {
			ITableSnapshot? table = store.Table("Sound");
			if(table != null) {
				Debug.Assert(store.IsFrozen, "The store should be frozen");
				this.Table = (TableSnapshot<SoundData>)table;
			} else {
				Debug.Assert(!store.IsFrozen, "In order to create table, the store should not be frozen");
				this.Table = SoundData.CreateTable(store);
			}
			this.InitializeSoundSet();
		}
		#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

		partial void InitializeSoundSet();

		//internal void Register() {
		//	foreach(RowId rowId in this.Table.Rows) {
		//		this.FindOrCreate(rowId);
		//	}
		//}


		// gets items wrapper by RowId
		public Sound? Find(RowId rowId) {
			if(!rowId.IsEmpty) {
				return this.Table.GetField(rowId, SoundData.SoundField.Field);
			}
			return null;
		}


		// gets items wrapper by RowId
		private IEnumerable<Sound> Select(IEnumerable<RowId> rows) {
			foreach(RowId rowId in rows) {
				Sound? item = this.Find(rowId);
				Debug.Assert(item != null, "What is the reason for the item not to be found?");
				yield return item;
			}
		}

		// Create wrapper for the row and register it in the dictionary
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1822:Mark members as static")]
		private Sound Create(RowId rowId, RowId CircuitRowId) {
			Sound item = new Sound(this.CircuitProject, rowId, CircuitRowId);
			return item;
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")]
		internal Sound FindOrCreate(RowId rowId) {
			Debug.Assert(!rowId.IsEmpty && !this.Table.IsDeleted(rowId), "Bad RowId");
			Sound? item;
			if((item = this.Find(rowId)) != null) {
				Debug.Assert(!item.IsDeleted(), "Deleted item should not be present in the dictionary");
				return item;
			}
			Guid primaryKeyValue = this.Table.GetField(rowId, SoundData.SoundIdField.Field);


			TableSnapshot<CircuitData>? tableCircuit = (TableSnapshot<CircuitData>?)this.CircuitProject.Table("Circuit");
			Debug.Assert(tableCircuit != null);
			return this.Create(rowId, tableCircuit.Find(CircuitData.CircuitIdField.Field, primaryKeyValue));
		}

		// Creates Sound wrapper
		private Sound CreateItem(
			// Fields of Sound table
			Guid SoundId,
			PinSide PinSide,
			string Notation,
			string Note
			// Fields of Circuit table

		) {
			TableSnapshot<CircuitData>? tableCircuit = (TableSnapshot<CircuitData>?)this.CircuitProject.Table("Circuit");
			Debug.Assert(tableCircuit != null);
			CircuitData dataCircuit = new CircuitData() {
				CircuitId = SoundId
			};
			RowId rowIdCircuit = tableCircuit.Insert(ref dataCircuit);

			SoundData dataSound = new SoundData() {
				SoundId = SoundId,
				PinSide = PinSide,
				Notation = Notation,
				Note = Note,
			};
			return this.Create(this.Table.Insert(ref dataSound), rowIdCircuit);
		}

		// Search helpers

		// Finds Sound by SoundId
		public Sound? FindBySoundId(Guid soundId) {
			return this.Find(this.Table.Find(SoundData.SoundIdField.Field, soundId));
		}

		public IEnumerator<Sound> GetEnumerator() {
			return this.Select(this.Table.Rows).GetEnumerator();
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.GetEnumerator();
		}

		private void NotifyCollectionChanged(NotifyCollectionChangedEventArgs arg) {
			NotifyCollectionChangedEventHandler? handler = this.CollectionChanged;
			if(handler != null) {
				handler(this, arg);
			}
		}

		internal List<Sound>? UpdateSet(int oldVersion, int newVersion) {
			IEnumerator<TableChange<SoundData>>? change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<Sound>? del = (handlerAttached) ? new List<Sound>() : null;
				while(change.MoveNext()) {
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						this.FindOrCreate(change.Current.RowId);
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						break;
					case SnapTableAction.Delete:
						if(handlerAttached) {
							Sound item = change.Current.GetOldField(SoundData.SoundField.Field);
							Debug.Assert(item.IsDeleted());
							del!.Add(item);
						}
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						break;
					}
				}
				change.Dispose();
				return del;
			}
			return null;
		}

		internal void NotifyVersionChanged(int oldVersion, int newVersion, List<Sound>? deleted) {
			IEnumerator<TableChange<SoundData>>? change = this.Table.GetVersionChangeChanges(oldVersion, newVersion);
			if(change != null) {
				bool handlerAttached = (this.CollectionChanged != null);
				List<Sound>? add = (handlerAttached) ? new List<Sound>() : null;
				this.StartNotifySoundSetChanged(oldVersion, newVersion);
				while(change.MoveNext()) {
					this.NotifySoundSetChanged(change.Current);
					switch(change.Current.Action) {
					case SnapTableAction.Insert:
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item was not created?");
						if(handlerAttached) {
							add!.Add(this.Find(change.Current.RowId)!);
						}
						break;
					case SnapTableAction.Delete:
						Debug.Assert(change.Current.GetOldField(SoundData.SoundField.Field).IsDeleted(), "Why the item still exists?");
						break;
					default:
						Debug.Assert(change.Current.Action == SnapTableAction.Update, "Unknown action");
						Debug.Assert(this.Find(change.Current.RowId) != null, "Why the item does not exist during update?");
						this.Find(change.Current.RowId)!.NotifyChanged(change.Current);
						break;
					}
				}
				change.Dispose();
				if(handlerAttached) {
					if(deleted != null && 0 < deleted.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove, deleted));
					}
					if(0 < add!.Count) {
						this.NotifyCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add, add));
					}
				}
				this.EndNotifySoundSetChanged();
			}
		}

		partial void StartNotifySoundSetChanged(int oldVersion, int newVersion);
		partial void EndNotifySoundSetChanged();
		partial void NotifySoundSetChanged(TableChange<SoundData> change);

		internal void NotifyRolledBack(int version) {
			if(this.Table.WasAffected(version)) {
				IEnumerator<RowId> change = this.Table.GetRolledBackChanges(version);
				if(change != null) {
					while(change.MoveNext()) {
						RowId rowId = change.Current;
						if(this.Table.IsDeleted(rowId)) {
						} else {
							this.FindOrCreate(rowId);
						}
					}
					change.Dispose();
				}
			}
		}
	}

}
