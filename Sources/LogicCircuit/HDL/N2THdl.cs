// Ignore Spelling: Hdl

using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace LogicCircuit {
	internal class N2THdl : HdlTransformation {
		public N2THdl(string name, IEnumerable<HdlSymbol> inputPins, IEnumerable<HdlSymbol> outputPins, IEnumerable<HdlSymbol> parts) : base(name, inputPins, outputPins, parts) {
		}

		private static string PinsText(IEnumerable<HdlSymbol> pins) {
			StringBuilder text = new StringBuilder();
			bool comma = false;
			foreach(HdlSymbol symbol in pins) {
				if(comma) {
					text.Append(", ");
				} else {
					comma = true;
				}
				Pin pin = (Pin)symbol.CircuitSymbol.Circuit;
				text.Append(pin.Name);
				if(1 < pin.BitWidth) {
					text.AppendFormat(CultureInfo.InvariantCulture, "[{0}]", pin.BitWidth);
				}
			}
			return text.ToString();
		}

		public override string TransformText() {
			this.WriteLine("CHIP {0} {{", this.Name);
			if(this.HasInputPins) {
				this.WriteLine("IN {0};", N2THdl.PinsText(this.InputPins));
			}
			if(this.HasOutputPins) {
				this.WriteLine("OUT {0};", N2THdl.PinsText(this.OutputPins));
			}
			this.WriteLine("PARTS:");
			foreach(HdlSymbol symbol in this.Parts) {
				bool comma = false;
				if(this.CommentPoints && (!symbol.AutoGenerated || symbol.Subindex == 1)) {
					this.WriteLine("\t// {0}", symbol.Comment);
				}
				this.Write("\t{0}(", symbol.Name);
				foreach(HdlConnection connection in symbol.HdlConnections().Where(c => c.GenerateOutput(symbol))) {
					if(comma) {
						this.Write(", ");
					}
					comma = true;
					this.Write("{0}={1}", connection.SymbolJamName(symbol), connection.PinName(symbol));
				}
				this.WriteLine(");");
			}
			this.WriteLine("}");
            return this.GenerationEnvironment.ToString();
		}
	}
}
